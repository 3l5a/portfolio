<main class="main-article">
    <section class="article">
        <div class="upward" title="Haut de page"><a href="#header">ðŸ¡©</a></div>
        <h1>Player audio</h1>
        <time>23 dÃ©cembre 2022</time>

        <p>Ici sont regroupÃ©s les concepts (mÃ©thodes, Ã©vÃ¨nements, etc) JavaScript qui ont eu une place importante dans l'avancement du projet de player audio <a href="index.php?page=player">Aurora</a>.</p>
        <hr>
        <div class="article">
            <dl>
                <dt>EvÃ¨nement 'inputâ€™ : </dt>
                <dd>
                    <p>
                        DÃ©clenche un Ã©vÃ¨nement utilisÃ© dans le player audio sur les inputs de type range (dans notre cas). Lorsquâ€™on saisit le bouton/curseur de lâ€™input range, les effets du changement de paramÃ¨tres se font sentir, alors quâ€™avec un Ã©vÃ¨nement de type 'clickâ€™, câ€™est lorsquâ€™on relÃ¢che le curseur que les paramÃ¨tres sâ€™adaptent, pas au dÃ©placement.
                        Exemple : pour un input range pour rÃ©gler le volume, lorsquâ€™on dÃ©place le bouton, le volume change alors mÃªme quâ€™on nâ€™a pas lÃ¢chÃ© le curseur.
                    </p>
                    <p>
                        Extrait de Mozilla (mieux expliquÃ©) : est dÃ©clenchÃ© de faÃ§on synchrone quand la valeur d'un Ã©lÃ©ment <code> &lt;input></code> (entrÃ©e), <code> &lt;select></code> (sÃ©lection) ou <code> &lt;textarea></code> (zone de texte) est modifiÃ©e
                    </p>
                    <p><i>Syntaxe type:</i> <code>monInput.addEventListener ('inputâ€™, fonction);</code></p>
                </dd>

                <dt>currentTime et duration :</dt>
                <dd>
                    <p><code>currentTime</code> et <code>duration</code> sont deux propriÃ©tÃ©s de lâ€™HTML audio. <code>currentTime</code> renvoie une valeur qui correspond Ã  un instant T sur la durÃ©e totale de la chanson (duration). </p>
                </dd>

                <dt>Event timeupdate :</dt>
                <dd>
                    <p>Lâ€™Ã©vÃ¨nement se produit quand <code>currentTime</code> est mis Ã  jour (Ã  une frÃ©quence situÃ©e entre 4 et 66Hz). Dans le cadre du player audio, on peut utiliser cet type dâ€™Ã©vÃ¨nement pour mettre Ã  jour la barre de progression de la chanson (input de type range). </p>
                    <p>Exemple :</p>
                    <img src="assets/timeupdate.png" alt="Exemple d'event timeupdate">
                </dd>

                <dt>forEach :</dt>
                <dd>
                    <p>La mÃ©thode <code>forEach()</code> permet dâ€™effectuer une ou des actions sur chaque Ã©lÃ©ment dâ€™un tableau (array). </p>
                    <p>Syntaxe type: <br>
                        <code>monTableau.forEach(Ã©lÃ©ment => {action qui va sâ€™exÃ©cuter pour chaque Ã©lÃ©ment de monTableau});</code>
                    </p>
                    <p><i>Note :</i> 'Ã©lÃ©mentâ€™ constitue un callback, câ€™est-Ã -dire quâ€™on appelle la fonction Ã  lâ€™intÃ©rieur dâ€™elle-mÃªme, puisque forEach est le raccourci de Â« pour chaque ELEMENT Â» et quâ€™on rappelle chaque Ã©lÃ©ment.
                        Dans mon cas, jâ€™ai utilisÃ© <code>forEach</code> pour place chaque chanson de mon tableau de chanson dans un tableau HTML
                    </p><img src="assets/foreach.png" alt="Exemple de forEach contenant un EventListener">
                    <figcaption>On peut mÃªme crÃ©er un Ã©vÃ¨nement dans un <code>forEach</code></figcaption>
                </dd>

                <dt>Object.values : </dt>
                <dd>
                    <p>MÃ©thode qui renvoie un tableau contenant les valeurs des clÃ©s dâ€™un objet.</p>
                    <p><i>Exemple de syntaxe :</i></p>
                    <img src="assets/objectvalues.png" alt="Un console log de la mÃ©thode Object.values">
                </dd>

                <dt>DÃ©construction dâ€™un morceau de code :</dt>
                <dd><img src="assets/morceau.png" alt="On peut lire : let a = Object.values(trackListInfo[i]).some(s=>source.includes(trackListInfo[i].source">
                    <p>Le i est lÃ  car il sâ€™agit dâ€™une boucle for.</p>
                    <p>Partons de la fin : <code>trackListInfo[i].source</code> correspond Ã  la valeur de la clÃ© source (chemin de lâ€™audio) de chacune de mes chansons (qui sont des objets JavaScript). </p>
                    <p><code>source.includes(trackListInfo[i].source)</code> :
                        Le premier â€˜sourceâ€™ est une variable correspondant au <code>.src</code> de lâ€™audio. Cet <code>audio.src</code> renvoie Ã  lâ€™adresse complÃ¨te de la source de lâ€™audio. En lâ€™occurrence, jâ€™ai demandÃ© au lecteur de lire une chanson avec la [source] dâ€™une de mes {chansons}, par exemple â€˜musique/rickroll.mp3â€™, mais lorsque je demande la valeur dâ€™<code>audio.src</code>, la console renvoie https://monsite.com/musique/rickroll.mp3 par exemple.
                    </p>
                    <p>Impossible donc, de savoir quelle chanson est jouÃ©e dans le lecteur.</p>
                    <p>Pour savoir quelle {chanson} joue, je dois demander Ã  la machine de voir si la [source] dâ€™une de mes {chansons} fait partie de audio.src.</p>
                    <p>Â« Traduite Â» en franÃ§ais, ce morceau de ligne de code pourrait se dire : Â« est-ce que la source contient/inclut le [chemin] dâ€™une de mes {chansons} ? Â»</p>
                    <p>On sait que le <code>Obj.values(trackListInfo[i])</code> nous retourne un [tableau] des valeurs dâ€™une {chanson} i. <br>
                        Le <code>tableauChanson.some(s=>source)</code> signifie : est-ce quâ€™il y a des valeurs dans ma chanson qui sont <code>audio.src</code> ? En ajoutant le <code>.includes</code> comme dans le morceau de code, on ne vÃ©rifie quâ€™une partie de <code>audio.src</code>.
                    </p>
                    <p>Pour rÃ©sumer, on peut traduire ce morceau entier de code par : <br>
                        Est-ce quâ€™une valeur dans ma {chanson} i correspond Ã  un segment de ma source audio ?
                    </p>
                    <p>Puis avec la boucle <code>for</code> (dâ€™oÃ¹ le i), on demande de regarder pour toutes les chansons. Lorsquâ€™une chanson vÃ©rifie cette condition, on sait que i est le numÃ©ro de la chanson jouÃ©e, ce que lâ€™on cherchait.</p>
                </dd>

                <dt>firstElementChild : </dt>
                <dd>
                    <p>Cette propriÃ©tÃ© renvoie le premier nÅ“ud enfant dâ€™un Ã©lÃ©ment, elle est en lecture seule.

                    </p>
                    <p>Exemple de syntaxe :</p><img src="assets/firstelementchild.png" alt="Utilisation de firstElementChild">
                    <p class="center-text"><b>ATTENTION</b></p>
                    <p><b>Ne pas confondre avec <code>firstChild</code> :</b> <code>firstChild</code> fonctionne presque comme <code>firstElementChild</code>, sauf que <code>firstChild</code> va renvoyer ce qui suit lâ€™Ã©lÃ©ment ciblÃ© dans lâ€™HTML. <code>firstChild</code> va prendre en compte lâ€™indentation, les espaces, les tabulations, etc, situÃ©s de lâ€™HTML. Dans ce cas, <code>firstChild</code> renvoie <code>#text</code>. Assez peu utile Ã  priori.</p>
                </dd>
            </dl>
        </div>

    </section>